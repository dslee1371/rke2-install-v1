# Replce control ip from repo files
- name: 1.1. Replace control node ip
  ansible.builtin.replace:
    path: "{{ item }}"
    regexp: "10.71.163.68"
    replace: "{{ ALL_Servers[0].ip }}"
  with_items:
    - "{{ playbook_dir }}/role/node/files/yum.repos.d/Nexus-Dockerce.repo"
    - "{{ playbook_dir }}/role/node/files/yum.repos.d/Nexus-Epel.repo"
    - "{{ playbook_dir }}/role/node/files/yum.repos.d/Nexus-Rocky.repo"

# Docker install from binary files
- name: 1.2. Docker file copy
  copy:
    src: "{{ playbook_dir }}/../packages/docker/docker-25.0.1.tgz"
    dest: "/tmp/docker-25.0.1.tgz"

# Stop docker service
- name: 1.3. Stop docker service
  systemd:
    name: docker
    state: stopped
    enabled: no
  ignore_errors: yes
#
- name: 1.4. Ensure /tmp/docker directory exists
  file:
    path: /tmp/docker
    state: directory
- name: 1.5. Ensure /etc/docker directory exists
  file:
    path: /etc/docker
    state: directory

# Untar docker file
- name: 1.6. Untar docker file
  shell: |
    tar xzvf /tmp/docker-25.0.1.tgz -C /tmp/docker

# Copy docker files
- name: 1.7. Copy docker files
  shell: |
    cp /tmp/docker/docker/* /usr/bin/
  args:
    creates: "/usr/bin/dockerd"

# Create service from j2 file
- name: 1.8. Create service from j2 file
  template:
    src: ./files/docker.service.j2
    dest: /etc/systemd/system/docker.service
  notify:
    - Reload systemd

# Configure docker insecure
- name: 1.9. docker insecure conf
  copy:
    dest: /etc/docker/daemon.json
    content: |
      {
        "insecure-registries": ["{{ REGISTRY_URL }}:5000"]
      }
#
# Configure docker auth directory
- name: 1.10. docker auth conf for directory
  file:
    path: /root/.docker
    state: directory

# Congigure docker auth
- name: 1.11. docker auth conf
  copy:
    dest: /root/.docker/config.json
    content: |
      {
              "auths": {
                      "{{ REGISTRY_URL }}:5000": {
                              "auth": "YWRtaW46YWRtaW4xMjM0MTIzNA=="
                      }
              }
      }

# Start docker service
- name: 1.12. Start and enable docker
  systemd:
    name: docker
    state: started
    enabled: yes

- name: 1.13. copy docker compose file
  copy:
    src: "files/docker-compose"
    dest: "/usr/bin/docker-compose"
    mode: 'u+x,g+x'

- name: 1.14. Check installed docker compose
  command: docker-compose --version
  register: docker_compose_version

- debug: var=docker_compose_version.stdout_lines

# Load nexus conainer image
- name: 1.15. Load Images
  shell: |
    docker load -i {{ item }}
  with_items:
    - "{{ playbook_dir }}/../packages/docker/sonatype-nexus.tar.gz"
    - "{{ playbook_dir }}/../packages/docker/haproxy.tar"

- name: 1.16. Create nexus docker-compose.yml
  copy:
    dest: "{{ playbook_dir }}/../nexus/docker-compose.yml"
    content: |
      version: '3.9'
      services:
        nexus:
          image: sonatype/nexus3:latest
          user: root
          restart: always
          ports:
            - 5000:5000
            - 8081:8081
          volumes:
            - {{ playbook_dir }}/../nexus/cert.pem:/opt/sonatype/nexus/etc/ssl/cert.pem
            - {{ playbook_dir }}/../nexus/key.pem:/opt/sonatype/nexus/etc/ssl/key.pem
            - {{ playbook_dir }}/../nexus/data:/opt/sonatype/sonatype-work/nexus3
          networks:
            - nexus-net
          environment:
            - NEXUS-CONTEXT=/
          healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8081/service/rest/v1/status"]
            interval: 10s
            timeout: 5s
            retries: 15
      networks:
        nexus-net:
          driver: bridge

# Run docker compose for nexus
- name: 1.17. Run nexus image from docker compose
  shell: docker-compose -f {{ playbook_dir }}/../nexus/docker-compose.yml up -d

# Wait for nexus to be healthy
- name: 1.18. Wait for nexus to be healthy
  shell: docker inspect --format='{{'{{'}}.State.Health.Status{{'}}'}}' $(docker-compose -f {{ playbook_dir }}/../nexus/docker-compose.yml ps -q nexus)
  register: health_status
  until: health_status.stdout == "healthy"
  retries: 30
  delay: 10


# Docker log in
- name: 1.19. docker login
  shell: |
    docker login {{ REGISTRY_URL }}:5000 --username admin --password admin12341234


# Create select-haproxy.cfg
- name: 1.20. Create haproxy select file
  copy:
    dest: "{{ playbook_dir }}/../haproxy/select-haproxy.sh"
    content: |
      #!/bin/bash

      # 사용법을 출력하는 함수
      usage() {
          echo "Usage: $0 {ingress|istio}"
          exit 1
      }

      # 인자가 제공되지 않은 경우 사용법을 출력합니다.
      if [ "$#" -ne 1 ]; then
          usage
      fi

      # 인자로 받은 값에 따라 CFG_FILE을 설정합니다.
      case $1 in
          ingress)
              CFG_FILE="ingress-haproxy.cfg"
              ;;
          istio)
              CFG_FILE="istio-haproxy.cfg"
              ;;
          *)
              usage
              ;;
      esac

      # 현재 활성화된 설정 파일을 제거합니다.
      sudo rm -f haproxy.cfg

      # 백업된 설정 파일을 복사하여 활성화합니다.
      sudo cp $CFG_FILE haproxy.cfg

      # Docker Compose를 재시작합니다.
      sudo docker-compose down
      sudo docker-compose -f docker-compose.yml up -d

# run haproxy service
- name: 1.21. Grant execute permissions
  shell: chmod +x {{ playbook_dir }}/../haproxy/select-haproxy.sh

# Create haproxy docker compose .
- name: 1.22. Create haproxy docker compose
  copy:
    dest: "{{ playbook_dir }}/../haproxy/docker-compose.yml"
    content: |
      version: '3'
      services:
        haproxy:
          image: haproxy:240723
          container_name: haproxy
          restart: always
          ports:
            - '80:80'
            - '443:443'
            - '6443:6443'
            - '9345:9345'
            - '8404:8404'
          volumes:
            - {{ playbook_dir }}/../haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg


# run haproxy service
- name: 1.23. Run haproxy
  shell: docker-compose -f {{ playbook_dir }}/../haproxy/docker-compose.yml up -d


